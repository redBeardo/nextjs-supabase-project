{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/tbright/Documents/Personal/FirstCursorProject/nextjs-supabase-project/src/utils/supabaseClient.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);"],"names":[],"mappings":";;;AAEoB;AAFpB;;AAEA,MAAM;AACN,MAAM;AAEC,MAAM,WAAW,CAAA,GAAA,0LAAA,CAAA,eAAY,AAAD,EAAE,aAAa","debugId":null}},
    {"offset": {"line": 25, "column": 0}, "map": {"version":3,"sources":["file:///Users/tbright/Documents/Personal/FirstCursorProject/nextjs-supabase-project/src/app/import-schedule/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\nimport Papa from 'papaparse';\nimport { supabase } from '@/utils/supabaseClient';\n\ntype Row = {\n  session_name: string;\n  session_description: string;\n  session_start_time: string;\n  session_length_minutes: string;\n  session_room: string;\n  title: string;\n  description: string;\n  speaker_name: string;\n  speaker_email: string;\n  co_speakers: string;\n  presentation_type: string;\n  audience_level: string;\n  tags: string;\n  scheduled_time: string;\n  length_minutes: string;\n  room: string;\n};\n\nexport default function ImportSchedulePage() {\n  const [csvRows, setCsvRows] = useState<Row[]>([]);\n  const [importing, setImporting] = useState(false);\n  const [message, setMessage] = useState('');\n\n  function handleFileChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const file = e.target.files?.[0];\n    if (!file) return;\n    Papa.parse<Row>(file, {\n      header: true,\n      skipEmptyLines: true,\n      complete: (results) => {\n        setCsvRows(results.data);\n      },\n    });\n  }\n\n  async function handleImport() {\n    setImporting(true);\n    setMessage('');\n\n    // 1. Deduplicate sessions\n    const sessionMap = new Map<string, any>();\n    csvRows.forEach(row => {\n      const key = `${row.session_name}|${row.session_start_time}|${row.session_room}`;\n      if (!sessionMap.has(key)) {\n        sessionMap.set(key, {\n          name: row.session_name,\n          description: row.session_description,\n          start_time: row.session_start_time,\n          length_minutes: Number(row.session_length_minutes),\n          room: row.session_room,\n        });\n      }\n    });\n\n    // 2. Insert sessions and get their IDs\n    const sessions = Array.from(sessionMap.values());\n    const { data: insertedSessions, error: sessionError } = await supabase\n      .from('sessions')\n      .upsert(sessions, { onConflict: ['name', 'start_time', 'room'] })\n      .select();\n\n    if (sessionError) {\n      setMessage('Error importing sessions: ' + sessionError.message);\n      setImporting(false);\n      return;\n    }\n\n    // 3. Map session keys to IDs\n    const sessionIdMap: Record<string, string> = {};\n    insertedSessions.forEach((session: any) => {\n      const key = `${session.name}|${session.start_time}|${session.room}`;\n      sessionIdMap[key] = session.id;\n    });\n\n    // 4. Prepare presentations with session_id\n    const presentations = csvRows.map(row => {\n      const sessionKey = `${row.session_name}|${row.session_start_time}|${row.session_room}`;\n      return {\n        title: row.title,\n        description: row.description,\n        speaker_name: row.speaker_name,\n        speaker_email: row.speaker_email,\n        co_speakers: row.co_speakers,\n        presentation_type: row.presentation_type,\n        audience_level: row.audience_level,\n        tags: row.tags ? row.tags.split(',').map(t => t.trim()) : [],\n        scheduled_time: row.scheduled_time,\n        length_minutes: Number(row.length_minutes),\n        room: row.room,\n        session_id: sessionIdMap[sessionKey],\n      };\n    });\n\n    // 5. Insert presentations\n    const { error: presError } = await supabase\n      .from('presentations')\n      .insert(presentations);\n\n    if (presError) {\n      setMessage('Error importing presentations: ' + presError.message);\n    } else {\n      setMessage('Import successful!');\n      setCsvRows([]);\n    }\n    setImporting(false);\n  }\n\n  return (\n    <div className=\"p-8 bg-gray-100 min-h-screen\">\n      <div className=\"bg-white rounded-lg shadow p-8\">\n        <h1 className=\"text-2xl font-bold mb-4 text-gray-900\">Import Conference Schedule (CSV)</h1>\n        <a\n          href=\"/sample-schedule.csv\"\n          download\n          className=\"mb-4 inline-block bg-blue-700 text-white px-4 py-2 rounded\"\n        >\n          Download CSV Template\n        </a>\n        <div className=\"mb-4\">\n          <label className=\"block text-gray-800 font-semibold mb-1\">Upload CSV</label>\n          <label className=\"flex items-center cursor-pointer bg-blue-700 hover:bg-blue-800 text-white px-4 py-2 rounded w-fit\">\n            <span>Select CSV File</span>\n            <input\n              type=\"file\"\n              accept=\".csv\"\n              onChange={handleFileChange}\n              className=\"hidden\"\n            />\n          </label>\n          {csvRows.length > 0 && (\n            <div className=\"mt-2 text-gray-900 font-medium\">\n              Selected: {csvRows.length} row(s) loaded\n            </div>\n          )}\n        </div>\n        {csvRows.length > 0 && (\n          <div className=\"mb-4\">\n            <h2 className=\"font-semibold mb-2 text-gray-900\">Preview:</h2>\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full border text-sm text-gray-900\">\n                <thead>\n                  <tr>\n                    {Object.keys(csvRows[0]).map(col => (\n                      <th key={col} className=\"border px-2 py-1 text-gray-900 bg-gray-100\">{col}</th>\n                    ))}\n                  </tr>\n                </thead>\n                <tbody>\n                  {csvRows.slice(0, 5).map((row, i) => (\n                    <tr key={i} className=\"even:bg-gray-50 hover:bg-gray-100\">\n                      {Object.values(row).map((val, j) => (\n                        <td key={j} className=\"border px-2 py-1 text-gray-900\">{val}</td>\n                      ))}\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n              {csvRows.length > 5 && (\n                <div className=\"text-gray-500\">Showing first 5 rows of {csvRows.length}</div>\n              )}\n            </div>\n          </div>\n        )}\n        <button\n          className=\"bg-green-700 text-white px-4 py-2 rounded\"\n          onClick={handleImport}\n          disabled={importing || csvRows.length === 0}\n        >\n          {importing ? 'Importing...' : 'Import Schedule'}\n        </button>\n        {message && <div className=\"mt-4 text-gray-900\">{message}</div>}\n      </div>\n    </div>\n  );\n} "],"names":[],"mappings":"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","debugId":null}}]
}